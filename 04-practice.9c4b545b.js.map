{"mappings":"AAeuB,MAQjBA,EAAO,CACXC,WAAYC,SAASC,cAAc,WACnCC,WAAYF,SAASC,cAAc,iBAiBrCH,EAAKI,WAAWC,iBAAiB,UAdFC,IAC7BA,EAAEC,iBAEF,MAAMC,EAAOF,EAAEG,cACTC,EAAQF,EAAKG,SAASC,OAAOC,MAAMC,OAE3B,KAAVJ,EAKJK,EAA2BL,GAJzBF,EAAKQ,WAST,MAAMC,EAAkBC,IACtB,MAAMC,EAA4BD,EAAKE,qBACpCC,KACCC,GACE,0DAA0DA,EAAQC,cAErEC,KAAK,IAER,MAAO,wFAnCe,kCAsCEN,EAAKO,0CACMP,EAAKQ,mFAETR,EAAKQ,2DACDR,EAAKS,qGAEMT,EAAKU,qHAGVV,EAAKW,iGAGpCV,+GAIiCD,EAAKY,+DAqB5CC,EAAoBC,IACxB,MAAMC,EAASD,EAAME,OACjBF,EAAMX,IAAIJ,GAAiBO,KAAK,IAChC,gCAEJxB,EAAKC,WAAWkC,UAAYF,GAMxBlB,EAA6BL,IACjC0B,MAAM,4FAAkD1B,YACrD2B,MAAKC,GAAOA,EAAIC,SAChBF,MAAK,EAACG,QAAEA,MACP,MAAMC,EAAWD,EAAQnB,KAAIH,IAC3B,OARYwB,EAQOxB,EAAKyB,GAP9BP,MAAM,sCAAkBM,8CAA8BL,MAAKC,GAAOA,EAAIC,SADpD,IAAAG,KAWdE,QAAQC,IAAIJ,GAAUJ,KAAKN,MAE5Be","sources":["src/js/practice.js"],"sourcesContent":["// Написати функцію getFilmsDescriptionByQuery\n// яка буде приймати query і повертати ПОВНИЙ опис для знайдених фільмів\n\n// themoviedb API повертає масив фільмів при пошуку по квері, але там не повна інформація,\n// тому нам потрібно зробити запит за фільмами по пошуковому слову\n\n// потім отримавшии масив всіх знайдений фільмів забрати їх айдішніки\n// і за допомогою Promise.all зробити запит за кожним фільмом по його айдішніку\n\n// отримавши потрібні дані, зарендеріть фільми в список movies (створіть в HTML ul з классом movies)\n\n// скріншот приблизного вигляду списка фільмів https://prnt.sc/JpsuSfNFDuDX\n\n// Дані для запиту за фільмами\n\nconst URL = 'https://api.themoviedb.org';\nconst API_KEY = '1a277fcd67d620e5e54e2f4f933a05d4';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\n// url для пошука фільмів по query `${URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=1`\n// url для пошука повної інформації по фільму за його айдішніком `${URL}/3/movie/${movieId}?api_key=${API_KEY}`\n// BASE_POSTER_URL базова урла до якої потрібно додати poster_path щоб отримати повний шлях до постера\n\nconst refs = {\n  moviesList: document.querySelector('.movies'),\n  searchForm: document.querySelector('.search-form'),\n};\n\nconst handleSearchFormSubmit = e => {\n  e.preventDefault();\n\n  const form = e.currentTarget;\n  const query = form.elements.search.value.trim();\n\n  if (query === '') {\n    form.reset();\n    return;\n  }\n\n  getFilmsDescriptionByQuery(query);\n};\n\nrefs.searchForm.addEventListener('submit', handleSearchFormSubmit);\n\nconst movieItemMarkup = item => {\n  const productionCompaniesMarkup = item.production_companies\n    .map(\n      company =>\n        `<li class=\"btn btn-outline-secondary btn-sm mr-2 mb-2\">${company.name}</li>`\n    )\n    .join('');\n\n  return `<div class=\"d-flex col-sm-6 col-lg-4 mb-4\">\n    <div class=\"card\">\n      <img src=\"${\n        BASE_POSTER_URL + item.poster_path\n      }\" class=\"card-img-top\" alt=\"${item.original_title}\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">${item.original_title}</h5>\n        <p class=\"card-text small\">${item.overview}</p>\n        <p class=\"card-text\">Status:\n          <span class=\"badge badge-secondary\">${item.status}</span>\n        </p>\n        <p class=\"card-text\">Vote average:\n          <span class=\"badge badge-info\">${item.vote_average}</span>\n        </p>\n        <ul class=\"movie-production-companies\">\n          ${productionCompaniesMarkup}\n        </ul>\n      </div>\n      <div class=\"card-footer\">\n        <small class=\"text-muted\">Runtime: ${item.runtime} minutes</small>\n      </div>\n    </div>\n  </div>`;\n\n  /* return `<li class=\"movies-item\">\n      <h3 class=\"movie-original-title\">${item.original_title}</h3>\n      <img class=\"movie-image\" src=\"${\n        BASE_POSTER_URL + item.poster_path\n      }\" alt=\"\" >\n      <p class=\"movie-status\">Status: ${item.status}</p>\n      <p class=\"movie-overview\">${item.overview}</p>\n      <p class=\"movie-vote-average\">Vote average: ${item.vote_average}</p>\n      <p class=\"movie-runtime\">Runtime: ${item.runtime} minutes</p>\n      <p>Production companies:</p>\n      <ul class=\"movie-production-companies\">\n          ${productionCompaniesMarkup}\n      </ul>\n  </li>`; */\n};\n\nconst renderMoviesItems = items => {\n  const markup = items.length\n    ? items.map(movieItemMarkup).join('')\n    : '<p>No results were found.</p>';\n\n  refs.moviesList.innerHTML = markup;\n};\n\nconst getFilmByID = movieId =>\n  fetch(`${URL}/3/movie/${movieId}?api_key=${API_KEY}`).then(res => res.json());\n\nconst getFilmsDescriptionByQuery = query => {\n  fetch(`${URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=1`)\n    .then(res => res.json())\n    .then(({ results }) => {\n      const promises = results.map(item => {\n        return getFilmByID(item.id);\n      });\n\n      Promise.all(promises).then(renderMoviesItems);\n    })\n    .catch();\n};\n\n// getFilmsDescriptionByQuery('Batman');\n"],"names":["$b4e0b91da62993e1$var$refs","moviesList","document","querySelector","searchForm","addEventListener","e","preventDefault","form","currentTarget","query","elements","search","value","trim","$b4e0b91da62993e1$var$getFilmsDescriptionByQuery","reset","$b4e0b91da62993e1$var$movieItemMarkup","item","productionCompaniesMarkup","production_companies","map","company","name","join","poster_path","original_title","overview","status","vote_average","runtime","$b4e0b91da62993e1$var$renderMoviesItems","items","markup","length","innerHTML","fetch","then","res","json","results","promises","movieId","id","Promise","all","catch"],"version":3,"file":"04-practice.9c4b545b.js.map"}