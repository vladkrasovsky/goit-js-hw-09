{"mappings":"AAeuB,MAQjBA,EAAO,CACXC,WAAYC,SAASC,cAAc,WACnCC,WAAYF,SAASC,cAAc,iBASrCH,EAAKI,WAAWC,iBAAiB,UANFC,IAC7BA,EAAEC,iBACF,MAAMC,OAAEA,GAAWF,EAAEG,cACrBC,EAA2BF,EAAOG,UAKpC,MAAMC,EAAkBC,IACtB,MAAMC,EAA4BD,EAAKE,qBACpCC,KACCC,GACE,8CAA8CA,EAAQC,cAEzDC,KAAK,IAER,MAAO,oEACgCN,EAAKO,4DA5BtB,kCA8BEP,EAAKQ,gEAESR,EAAKS,+CACXT,EAAKU,mEACaV,EAAKW,6DACfX,EAAKY,qHAGnCX,2BAKNY,EAAoBC,IACxB3B,EAAKC,WAAW2B,UAAYD,EAAMX,IAAIJ,GAAiBO,KAAK,KAMxDT,EAA6BmB,IACjCC,MAAM,4FAAkDD,YACrDE,MAAKC,GAAOA,EAAIC,SAChBF,MAAK,EAACG,QAAEA,MACP,MAAMC,EAAWD,EAAQlB,KAAIH,IAC3B,OARYuB,EAQOvB,EAAKwB,GAP9BP,MAAM,sCAAkBM,8CAA8BL,MAAKC,GAAOA,EAAIC,SADpD,IAAAG,KAWdE,QAAQC,IAAIJ,GAAUJ,KAAKL,MAE5Bc","sources":["src/js/practice.js"],"sourcesContent":["// Написати функцію getFilmsDescriptionByQuery\n// яка буде приймати query і повертати ПОВНИЙ опис для знайдених фільмів\n\n// themoviedb API повертає масив фільмів при пошуку по квері, але там не повна інформація,\n// тому нам потрібно зробити запит за фільмами по пошуковому слову\n\n// потім отримавшии масив всіх знайдений фільмів забрати їх айдішніки\n// і за допомогою Promise.all зробити запит за кожним фільмом по його айдішніку\n\n// отримавши потрібні дані, зарендеріть фільми в список movies (створіть в HTML ul з классом movies)\n\n// скріншот приблизного вигляду списка фільмів https://prnt.sc/JpsuSfNFDuDX\n\n// Дані для запиту за фільмами\n\nconst URL = 'https://api.themoviedb.org';\nconst API_KEY = '1a277fcd67d620e5e54e2f4f933a05d4';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\n// url для пошука фільмів по query `${URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=1`\n// url для пошука повної інформації по фільму за його айдішніком `${URL}/3/movie/${movieId}?api_key=${API_KEY}`\n// BASE_POSTER_URL базова урла до якої потрібно додати poster_path щоб отримати повний шлях до постера\n\nconst refs = {\n  moviesList: document.querySelector('.movies'),\n  searchForm: document.querySelector('.search-form'),\n};\n\nconst handleSearchFormSubmit = e => {\n  e.preventDefault();\n  const { search } = e.currentTarget;\n  getFilmsDescriptionByQuery(search.value);\n};\n\nrefs.searchForm.addEventListener('submit', handleSearchFormSubmit);\n\nconst movieItemMarkup = item => {\n  const productionCompaniesMarkup = item.production_companies\n    .map(\n      company =>\n        `<li class=\"production-companies-item-name\">${company.name}</li>`\n    )\n    .join('');\n\n  return `<li class=\"movies-item\">\n      <h3 class=\"movie-original-title\">${item.original_title}</h3>\n      <img class=\"movie-image\" src=\"${\n        BASE_POSTER_URL + item.poster_path\n      }\" alt=\"\" >\n      <p class=\"movie-status\">Status: ${item.status}</p>\n      <p class=\"movie-overview\">${item.overview}</p>\n      <p class=\"movie-vote-average\">Vote average: ${item.vote_average}</p>\n      <p class=\"movie-runtime\">Runtime: ${item.runtime} minutes</p>\n      <p>Production companies:</p>\n      <ul class=\"movie-production-companies\">\n          ${productionCompaniesMarkup}\n      </ul>\n  </li>`;\n};\n\nconst renderMoviesItems = items => {\n  refs.moviesList.innerHTML = items.map(movieItemMarkup).join('');\n};\n\nconst getFilmByID = movieId =>\n  fetch(`${URL}/3/movie/${movieId}?api_key=${API_KEY}`).then(res => res.json());\n\nconst getFilmsDescriptionByQuery = query => {\n  fetch(`${URL}/3/search/movie?api_key=${API_KEY}&query=${query}&page=1`)\n    .then(res => res.json())\n    .then(({ results }) => {\n      const promises = results.map(item => {\n        return getFilmByID(item.id);\n      });\n\n      Promise.all(promises).then(renderMoviesItems);\n    })\n    .catch();\n};\n\n// getFilmsDescriptionByQuery('Batman');\n"],"names":["$b4e0b91da62993e1$var$refs","moviesList","document","querySelector","searchForm","addEventListener","e","preventDefault","search","currentTarget","$b4e0b91da62993e1$var$getFilmsDescriptionByQuery","value","$b4e0b91da62993e1$var$movieItemMarkup","item","productionCompaniesMarkup","production_companies","map","company","name","join","original_title","poster_path","status","overview","vote_average","runtime","$b4e0b91da62993e1$var$renderMoviesItems","items","innerHTML","query","fetch","then","res","json","results","promises","movieId","id","Promise","all","catch"],"version":3,"file":"04-practice.775d2072.js.map"}